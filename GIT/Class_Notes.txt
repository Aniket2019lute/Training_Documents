		
#######################
Day 2 - 22nd Sep. 2024
#######################				


	Version Conrol System - Using GIT 
		
	Using DevOps Approach :::				
	
		1. Create Source Code 		*.java 
		2. Save the Source Code in the Source Code Repository(github)		
			
	Developer :::
	
	Create a index.html 
	
	<html>
	----
	-
	-
	-
	-
	-
	-----
	</html>
	
	save as index.html in a directory
	Test the changes 
			
	<html>
	----
	-adfasdf
	-asdfsdf
	-
	-
	-
	-----
	ensuree
	ee
	ee
	</html>			

	save as index.html in a directory
	Test the changes		
	
	
	Version Control System ::
	
		- Is used to Version Control the Source Code Changes 
		- Is used to track the Changes 


	<html>
	----
	-
	-
	-
	-
	-
	-----
	</html>
	
	save as index.html in a directory 		# index.html_v1.0	--> Version Number/Tags/Commit_Id
	Test the changes 

	<html>
	----
	-
	-
	-
	-
	-
	-----
	</html>
	
	save as index.html in a directory 		# index.html_v1.1
	Test the changes 
		
	Types of Version Control System :::
	
	
		Local VCS 
		
		Centralized VCS 
		
		Distributed VCS 
		
		
		
	GIT ::
	
		- Is a Open-Source Distributed VCS 
		- Is used to Version Control the Source Code Changes 
		- Is used to track the Changes 
		- Is used to perform parallel Development - Using Branching Techniques
		
		
		
	Repository ::
	
		- Collection of Folders and Files.
		
		
	GIT Repository ::: Distributed VCS
	
	Local Repository & Remote Repository 
	
	Remote Repository :::	
	
		github 
		AWS CodeCommit 
		Azure Repo 
		gitlab
		bit-bucket		
		
	Local Repository ::
	
		GIT Client 
	
	
	GIT Repository :::
	
	Application Architecture :::
	
		- Micro-Service based application 
		
			- for each Micro-Service we create a source code repository.
						
	Using GitHub we can share the Files and Folders 	
	
	Create github repo for your batch 
	
	
	GIT - Distributed VCS :::
	
	Local Machine 																		Remote Server 	

	Repo																				Repo
	
	
	GIT File WorkFlow  == 60% 
	
	Git Cli Command 
	
	Git branching Techniques
	
	Remote Repositories
	
	
	
	Developers;
	
	Workload of Developers??
	
	
	- Enhancement_Projects / Bugfixing Project 	==> Source Code Repo is already present in the remote server
	
	- New Project 								==> Create New Repo in local machine and publish to remote repository	
	
		
	GIT File WorkFlow:::
	
	Local Machine 																									Remote Server 

	Install GIT Client
	

	Working Directory 						Staging Area						Local Repository						Remote Repository
	                                                                                                            
	index.html			------------>		index.html		------------->		index.html_v1.0    ------------->             index.html_v1.0
						  git add                             git commit                             git push               
	index.html			------------>		index.html		------------->		index.html_v1.1    ------------->             index.html_v1.1
						  git add                             git commit                             git push               
	index.html			------------>		index.html		------------->		index.html_v1.2    ------------->             index.html_v1.2
						  git add                             git commit                             git push               
	index.html			------------>		index.html		------------->		index.html_v1.3    ------------->             index.html_v1.3
						  git add                             git commit                             git push               
	index.html			------------>		index.html		------------->		index.html_v1.4    ------------->             index.html_v1.4
						  git add                             git commit                             git push
		
		


	git add 				# To Add the changes from working directory to staging area 
	
	git commit 				# To Commit the changes from Staging area to Local Repository
	
	
	git push				# To Push the changes from Local Repository to Remote Repository
	
	
	git clone				# To Clone/Copy the entire Remote repository from Remote Server to Local Machine
	
	git fetch/pull
		==> Both git fetch and git pull are used to handle the incremental changes from remote repository
		
		git fetch 			
							# To just check for the incremental changes from remote repository, if there is any incremental changes exist, it will update the details only in the Local Repository. git fetch will not update any changes into the working directory.
							
							Upon fetch to merge the changes from local repository to working directory, we need used git merge or git pull
							
		git pull 			
							# To check for the incremental changes from remote repository, if there is any incremental changes exist, it will update all the incremental changes in the Local Repository as well in the working directory.	

							git pull = git fetch + git merge 


	Fork					# Copy of one remote repository to another remote repository
	
#parent remote repo -- fork to -- child remote repo --> pull to ur local 




	Install GIT Client :		# https://git-scm.com/downloads
	
	
	
		Windows Machine :
		
			- GIT Bash 			# Based on Linux Command 		-- Recommended 
			
			- GIT CMD 			# Based on Powershell
			
			- GIT GUI
			
			
	Open Git Bash / Terminal
	
	git --version				# To check the version of git installed in the local machine
	
	
- Install git client 

- Focus on Linux Fundamentals - Pre-requisites




#######################
Day 3 - 28th Sep. 2024
#######################	

	- GIT CLI Commands :


	- git cli commands 
	- git branching techniques 
	- remote repositories
	
	- Intro to Jenkins 

	
		Java_Application_Directory - Workspace!
		
			- src/ 
				- main/
				- test/
			- application.properties
			- target/
				*.war
				
				
	Folder Structure :
	
		cd d:/
			mkdir Edu_Sep21_DCP
			cd Edu_Sep21_DCP
				mkdir repo1					#Java_Application_Directory
				mkdir repo2
					cd repo1
					
					
	GIT File WorkFlow:::

	Local Machine 																				

	Install GIT Client


	Working Directory 						Staging Area						Local Repository
																								 
	index.txt			------------>		index.txt		------------->		index.txt 
						  git add                             git commit                                 
	
	


		git init 			# Is used to initilise a git repository
							# It creates .git - GIT Directory 
							# It creates a default branch - master / main 			# Default
									--> git branches are the logical of git repo
									--> It create an isolated path for parallel development
									
									
		git status 			# To Check the current status of repo 
		
		
		git add 
		
		
		git commit 
		
		
		git log 			# get the list of commit history
									
									
		HEAD Pointer		# This used by git to identify the latest commit point
							# HEAD Pointer will always points to latest commit of the current branch.
							
							
		Tracking the Changes :::
		
			- When ?
			- Who ?
			- What ?
							
							
									
		git config :
		
			Global Configuration :			# It is applicable to all the repositories
			
				git config --global user.name "Loksai"
				git config --global user.email "Loksai@asdfasdf.com"
			
			Local Configuration :			# It is applicable to a specific repository	# It is default 
			
				git config user.name "Loksai"
				git config user.email "Loksai@asdfasdf.com"
				
				
		1. git init 
		
		2. git config :
		   
           	Global Configuration :			# It is applicable to all the repositories
           	
           		git config --global user.name "Loksai"
           		git config --global user.email "Loksai@asdfasdf.com"
				
		3. echo "rec1" >> file1.txt 
		
		4. git add file1.txt 
		
		5. git commit -m "created file1.txt"
		
		6. git log 
		
		7. git status 
		
	

	
		git add :
			
			git add <file_name>
			
			git add <file1> <file2> <file3>
			
			git add *.java <file_name>
			
			git add .								# Add all the changes from working to staging area.
					


		Un-Stage / Undo the changes from staging area :::
		
		
			- git rm --cached <file_name>		# To undo the file changes back to working directory
			
			- git rm -f <file_name> 			# To undo the file changes from staging area and permanently remove that file from working directory
			
		
		

		git log 			# get the list of commit history
		
			git log 
			
			git log --oneline 						# frequently used 
			
			git log --oneline -2 
			
			git log -2 
			
			git log --stat -3 
			
			
		git show <commit_id>
		
		
		ls 				# Is a Linux Command to get the list of files/folders from the working directory 	
		
		git ls-files 	# Is to get the list of files being tracked by git. 
		
		
			
	repo4		
	Working Directory 						Staging Area						Local Repository
																								 
	index.txt			------------>		index.txt		------------->		index.txt 
						  git add                             git commit                                 
			
			
			

	git reset :::
	
		- Is used to undo the change from local repository
		
		- It will take the Head pointer back to the previous commit point 
		
		- It will not create any new commit point to track the changes 
		
		- As a best practise, git reset is not recommended in the shared repositories
		
		
		Syntax :
		
			git reset <reset_option> <previous_Commit_id>
			
			
		
		Types of git reset ::
		
		
			git reset --soft ::
			
				- Is used to take the committed file changes back to the staging area.
				- The HEAD Pointer will be moved back to the previous commit point 
				- It will not create any commit point to track the changes.
				- The file changes will be removed from local repository, but it will be retained in the staging area as well as in the working directory 
				
				git reset --soft <previous_Commit_id>
			
			git reset --mixed ::									# Default		
			
				- Is used to take the committed file changes back to the working directory.
				- The HEAD Pointer will be moved back to the previous commit point. 
				- It will not create any commit point to track the changes.
				- The file changes will be removed from local repository and the staging area, but it will be there in the working directory 
				
				git reset --mixed <previous_Commit_id>		
			
			git reset --hard ::

				- Is used to permanently delete the file changes from local repository and working directory.
				- It leads to permanent data loss.
				- The HEAD Pointer will be moved back to the previous commit point. 
				- It will not create any commit point to track the changes.
				- The file changes will be removed from local repository, the staging area as well as from the working directory 
				
				git reset --hard <previous_Commit_id>	
				
				
	git revert ::::
	
		- git revert is same as git reset --hard 
		
		- But, the difference is git revert will create new commit point to track the changes.
		
		- git revert is used to revert the changes of any specific commit point 
		
		- During revert, provide commit message to create new commit point 
		
		- It is recommended to use this in the shared repository
		
		- git revert will maintain the commit history for tracking.
		
		
		Syntax :
		
			git revert <any_specific_commit_id>
		
		Project_Folder 		-- git init 
			src 
			
			test 
			
		$ git init <Project_Folder>
		
		
	
	
	.gitignore ::::
	
		- Is used to ignore the files from tracking!
		
		- .gitignore is a file to be created and made as a very first commit 
		
		- .gitignore file contains all the files/file patterns to be ignored.
		
		- As a best practise, .gitignore file shoule be the very first commit in any repositories
	
	
	git init 
	
	vi .gitignore 
	
		press i 		# to go to insert mode 
		
	
	*.doc
	*.prop
	*.class


  501  cd d:
  502  mkdir Edu_Sep21_DCP
  503  cd Edu_Sep21_DCP/
  504  clear
  505  ls
  506  mkdir repo1
  507  ls
  508  mkdir repo2
  509  ls
  510  cd repo1
  511  pwd
  512  clear
  513  pwd
  514  ls -a
  515  ls
  516  git init
  517  ls -a
  518  cd .git/
  519  ls
  520  cd ..
  521  ls
  522  ls
  523  echo "Hello"
  524  echo "Record1" >> index.txt
  525  git status
  526  git add index.txt
  527  git status
  528  git commit -m "Created index.txt"
  529  git status
  530  ls
  531  git status
  532  echo "rec1" >> file1.txt
  533  git status
  534  echo "Record2" >> index.txt
  535  git status
  536  git add file1.txt
  537  git status
  538  git add index.txt
  539  git status
  540  git commit -m "Created few changes"
  541  git status
  542  git log
  543  echo "rec1" >> file2.txt
  544  git add file2.txt
  545  git commit -m "created file2.txt"
  546  git log
  547  cd ..
  548  clear
  549  pwd
  550  ls
  551  cd repo1/
  552  cd ..
  553  clear
  554  ls
  555  cd repo2
  556  git status
  557  ls -a
  558  git init
  559  ls -a
  560  git status
  561  ls -a
  562  ls
  563  ls -a
  564  cd .git
  565  ls
  566  clear
  567  cd ..
  568  ls
  569  clear
  570  git status
  571  echo "rec1" >> file1.txt
  572  git status
  573  git add file1.txt
  574  git status
  575  git commit -m "created file1.txt"
  576  git status
  577  git log
  578  clear
  579  git log
  580  git config user.name "Loksai"
  581  echo "rec1" >> f1.txt
  582  git add f1.txt
  583  git commit -m "created f1.txt"
  584  git log
  585  cd ..
  586  cd repo1
  587  git log
  588  echo "rec1" >> l1.txt
  589  git add .
  590  git commit -m "created l1.txt"
  591  git log
  592  cd ..
  593  cd repo2
  594  git log
  595  git config --global user.name "Loksai-ETA"
  596  git config --global user.email "testuser1@asdfas.com"
  597  echo "rec1" >> l2.txt
  598  git add l2.txt
  599  git commit -m "created l2.txt"
  600  git log
  601  clear
  602  cd ..
  603  mkdir repo3
  604  ls
  605  cd repo3
  606  git init
  607  git status
  608  ls -a
  609  ls
  610  clear
  611  echo "rec1" >> f1.txt
  612  git status
  613  git add f1.txt
  614  git status
  615  git commit -m "Created f1.txt"
  616  git log
  617  clear
  618  echo "rec1" >> s1.txt
  619  echo "rec1" >> s2.txt
  620  echo "rec1" >> s3.txt
  621  echo "rec1" >> q1.doc
  622  echo "rec1" >> q2.doc
  623  echo "rec1" >> q3.doc
  624  echo "rec1" >> a1.java
  625  echo "rec1" >> a2.java
  626  echo "rec1" >> a3.java
  627  echo "rec1" >> a4.java
  628  clear
  629  ls
  630  git status
  631  git add a1.java
  632  git status
  633  git add *.java
  634  git status
  635  git add q1.doc s1.txt
  636  git status
  637  git add .
  638  git status
  639  clear
  640  git status
  641  clear
  642  git status
  643  git rm --cached q1.txt
  644  git rm --cached q1.doc
  645  git status
  646  ls
  647  git rm --cached *.doc
  648  git rm --cached q2.doc
  649  clear
  650  git status
  651  git add .
  652  git status
  653  ls
  654  git rm -f a1.java
  655  git status
  656  ls
  657  git commit -m "created few temp files"
  658  git status
  659  git log
  660  clear
  661  git log
  662  echo "rec1" >> s1.txt
  663  git add .
  664  git commit -m "created s1.txt"
  665  echo "rec1" >> s2.txt
  666  git add .
  667  git commit -m "created s3.txt"
  668  echo "rec1" >> s3.txt
  669  git add .
  670  git commit -m "created s3.txt"
  671  echo "rec1" >> s4.txt
  672  git add .
  673  git commit -m "created s3.txt"
  674  clear
  675  git log
  676  celar
  677  clear
  678  git log
  679  git log --oneline
  680  git log -2
  681  git log -3
  682  git log --oneline -3
  683  clear
  684  git log --stat -2
  685  git log -1
  686  clear
  687  git log --oneline
  688  git log --oneline -4
  689  git log --oneline -5
  690  git show 844c66a
  691  git show 616245d
  692  celar
  693  clear
  694  git log --oneline -5
  695  git show 844c66a
  696  ls
  697  celar
  698  clear
  699  git status
  700  ls
  701  echo "rec1" >> tempfile1.txt
  702  ls
  703  git ls-files
  704  git status
  705  git add .
  706  git ls-files
  707  git status
  708  git rm --cached tempfile1.txt
  709  ls
  710  git ls-files
  711  git status
  712  git add .
  713  git commit -m "created temfile1?
"
  714  clear
  715  cd ..
  716  ls
  717  mkdir repo4
  718  clear
  719  cd  repo4
  720  clear
  721  git init
  722  echo "rec1" >> f1.txt
  723  git add .
  724  git commit -m "CM1"
  725  echo "rec1" >> f2.txt
  726  git add .
  727  git commit -m "CM2"
  728  echo "rec1" >> f3.txt
  729  git add .
  730  git commit -m "CM3"
  731  echo "rec1" >> f4.txt
  732  git add .
  733  git commit -m "CM4"
  734  echo "rec1" >> f5.txt
  735  git add .
  736  git commit -m "CM5"
  737  clear
  738  git log --oneline
  739  ls
  740  git ls-files
  741  git status
  742  git reset --soft 4efa825
  743  git status
  744  ls
  745  git ls-files
  746  git log --oneline
  747  git commit -m "CM5.1"
  748  git log --oneline
  749  ls
  750  git ls-files
  751  git status
  752  git reset --mixed 4efa825
  753  git status
  754  ls
  755  git ls-files
  756  git log --oneline
  757  git add .
  758  git commit -m "CM5.2"
  759  ls
  760  clear
  761  ls
  762  git ls-files
  763  git log --oneline
  764  git status
  765  git reset --hard 4efa825
  766  ls
  767  git ls-files
  768  git status
  769  git log --oneline
  770  git reset --hard 1185fe2
  771  git status
  772  ls
  773  git ls-files
  774  git log --oneline
  775  git reset --hard 15b3f85
  776  clear
  777  git log --oneline
  778  git ls-files
  779  ls
  780  git status
  781  ls
  782  clear
  783  git status
  784  ls
  785  git log --oneline
  786  echo "rec1" >> a1.txt
  787  git add .
  788  git commit -m "CM2"
  789  echo "rec1" >> a2.txt
  790  git add .
  791  git commit -m "CM3"
  792  echo "rec1" >> a3.txt
  793  git add .
  794  git commit -m "CM4"
  795  ls
  796  git log --oneline
  797  git show 4d05580
  798  git revert 15b3f85
  799  ls
  800  git ls-files
  801  git status
  802  git log --oneline
  803  git show 10a9087
  804  ls
  805  git revert 10a9087
  806  ls
  807  git ls-files
  808  git status
  809  git log --oneline
  810  ls -a
  811  clear
  812  git log --oneline
  813  ls -a
  814  cd .git/
  815  ls
  816  cd objects/
  817  ls
  818  cd ..
  819  clear
  820  ls
  821  cd objects/
  822  ls
  823  cd ..
  824  cd ..
  825  clear
  826  ls
  827  cat a1.txt
  828  ls -a
  829  cd ..
  830  clear
  831  ls
  832  mkdir repo5
  833  clear
  834  cd repo5
  835  git init
  836  ls -a
  837  ls
  838  git status
  839  vi .gitignore
  840  git status
  841  git add .
  842  git commit -m "Initial Commit - gitignore"
  843  clear
  844  ls
  845  ls -a
  846  cat .git
  847  cat .gitignore
  848  echo "rec1" >> a1.txt
  849  git status
  850  echo "rec1" >> sample.txt
  851  git status
  852  ls
  853  git add .
  854  git status
  855  git commit -m "asdf"
  856  ls
  857  git log --oneline
  858  git status
  859  git show 312ba26
  860  ls
  861  clear
  862  git log --oneline
  863  echo "rec1" >> asdf
  864  git add .
  865  git commit -m "asdf"
  866  clear
  867  git log --oneline
  868  git reset --hard b0ee368
  869  git log --oneline
  870  ls -a
  871  vi .gitignore
  872  clear
  873  history


	
#######################
Day 4 - 29th Sep. 2024
#######################		
	
	GIT Branching Techiniques to enable parallel development
	
	GIT Remote Repositories
	
	Jenkins Introduction
	
	
	GIT Branching Techiniques to enable parallel development :
	
		Branches provides a isolated logical path to perform parallel development 
	
	Repo1 :
	
		master/main 				# Default Branch 
									# Is always considered as a Production version of source code.
									# It is always must to maintain the integrity of master branch
									# The Lastest version of application is always referred from master branch

	GIT Branching Strategies :::
	
		--> Policies that are defined to ensure the integrity of Repo.
	
	

	Scenario 1 :
	
		Repo1 :
		
			master : cm1,cm2,cm3
					 cm1,cm2,cm3,f1cm1,f1cm2,f1cm3			# Upon merging feature1 to master
			
				feature1 : 	cm1,cm2,cm3
							cm1,cm2,cm3,f1cm1,f1cm2,f1cm3
		
	Scenario 2 :
	
		Repo1 : 
		
			master : rel1,rel2,rel3
						rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3	# Upon merging feature1&2.
			
			
				feature1 : rel1,rel2,rel3
							rel1,rel2,rel3,f1cm1,f1cm2,f1cm3
				
				feature2 : rel1,rel2,rel3
							rel1,rel2,rel3,f2cm1,f2cm2,f2cm3



	Scenario 3 :		 Maintain integrity of master branch
	
		Repo1 : 
		
			master : rel1,rel2,rel3		
						rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3			#Upon merging Developer_Branch
						
				Developer_Branch : rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
				
					feature1 : rel1,rel2,rel3
								rel1,rel2,rel3,f1cm1,f1cm2,f1cm3
					
					feature2 : rel1,rel2,rel3
								rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
						

						
	Scenario 4 :		 Maintain integrity of master branch
	
		Repo1 : 
		
			master : rel1,rel2,rel3	
						rel1,rel2,rel3,Developer1_Changes,Developer2_Changes

				Integration_Branch : rel1,rel2,rel3,Developer1_Changes,Developer2_Changes
						
					Developer1_Branch : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
										
						feature1 : rel1,rel2,rel3
									rel1,rel2,rel3,f1cm1,f1cm2,f1cm3
						
						feature2 : rel1,rel2,rel3
									rel1,rel2,rel3,f2cm1,f2cm2,f2cm3									
									
					Developer2_Branch : rel1,rel2,rel3
										rel1,rel2,rel3,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
					
						feature1 : rel1,rel2,rel3
									rel1,rel2,rel3,f1cm1,f1cm2,f1cm3
						
						feature2 : rel1,rel2,rel3
									rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
									

	Scenario 5 :		 Maintain integrity of master branch
	
		Repo1 : 
		
			master : rel1,rel2,rel3	
						rel1,rel2,rel3,rel4													# rel4 is the integration of Team1&2 Changes 
			
				Release_Branch : rel1,rel2,rel3	
									rel1,rel2,rel3,Team1_Changes,Team2_Changes							

					Integration_Branch1 : rel1,rel2,rel3,Developer1_Changes,Developer2_Changes										# Team1
							
						Developer1_Branch : rel1,rel2,rel3
											rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
											
							feature1 : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3
							
							feature2 : rel1,rel2,rel3
										rel1,rel2,rel3,f2cm1,f2cm2,f2cm3									
										
						Developer2_Branch : rel1,rel2,rel3
											rel1,rel2,rel3,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
						
							feature1 : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3
							
							feature2 : rel1,rel2,rel3
										rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
										
					Integration_Branch2 : rel1,rel2,rel3,Developer1_Changes,Developer2_Changes										# Team2
							
						Developer1_Branch : rel1,rel2,rel3
											rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
											
							feature1 : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3
							
							feature2 : rel1,rel2,rel3
										rel1,rel2,rel3,f2cm1,f2cm2,f2cm3									
										
						Developer2_Branch : rel1,rel2,rel3
											rel1,rel2,rel3,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
						
							feature1 : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3
							
							feature2 : rel1,rel2,rel3
										rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
										
										
	Working with Branches :
	
		- Create a branch 
		
		
		git branch 								# To list the branches
		
		git branch <new_Branch_Name>			# To Create New Branch 
		
		git checkout -b <new_Branch_Name>		# To Create New Branch & Switch to new branch 		
		
		git switch -c <new_Branch_Name>			# To Create New Branch & Switch to new branch 
		
		git switch <existing_branch_name>		# To Switch to any branch 
		
		
		git merge								# To Merge the changes to any target branches 
		
		
		
		Repo1 :
		
			master : cm1 
			
				git switch -c feature1
			
				feature1 : cm1
							cm1,f1cm1,f1cm2	
							
				git switch master 
				
				git merge feature1				# This Command should executed from the target branch 
				
			
		Handle Merge Conflicts during Merge :::
		
		
		Reason for Merge Conflict ???
		
			--> When more than one developer/feature try to update a same file at the same record level in the target branch, Merge Conflict Occurs. 
			
		Fix Merge Conflict :::
		
			1. Identify the file(s) causing Merge Conflict 
			2. Open that file(s) and review the change 
			3. Decide which changes to be updated in the target branch 
			4. Update the File(s) accordingly and remove all the header and footer tag lines from that file in target branch 
			5. Add and Commit the Changes into the target branch 
			
			
		As per DevOps Practice, we should prevent merge conflict! 
		
			- Proper Collaboration !
			
			
		GIT way of preventing the Merge Conflicts in the Target Branch :::
		
		git rebase :::
		
			- To Maintain the Linear commit History 
			- To prevent Merge Conflicts in the Target Branch 
			- Rebase is used to keep the current branch in sync with the target branch.
			- As a best practise, it is always recommended to rebase before merge.
			
		Repo1:
		
			master : cm1 
			
						cm1,f1cm1,f1cm2,f1cm3								# Upon Merging Feature1
						
						cm1,f2cm1,f2cm2,f2cm3,f1cm1,f1cm2,f1cm3				# Upon Merging Feature2 - without proper rebase
					
						cm1,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3				# Expected Linear Commit history - with proper rebase
					
				feature1 : cm1 
							cm1,f1cm1,f1cm2,f1cm3
							
							git switch master 
							
							git merge feature1 
				
				
				feature2 : cm1 
							cm1,f2cm1,f2cm2,f2cm3
							
							git switch master 
							
							git merge feature2	

				# Using GIT REBASE :::
				
				
				feature2 : cm1 
							cm1,f2cm1,f2cm2,f2cm3							
							
							git rebase master 
							
							cm1,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
							
							git switch master 
							
							git merge feature2								
									
			
		
		git squash :::
		
			--> It is used to combine more than once commits into single commit point.
			
			
			Repo1: 
			
				master : cm1 	
							cm1,f1cm1,2,3,4,5,6,7,8,9,.....................,100				# Upon merging feature1 
							cm1,feature1_Changes											# Upon merging feature1 with squash 
				
					feature1 : cm1
								cm1,f1cm1,2,3,4,5,6,7,8,9,.....................,100
		
							git switch master 
							
							git merge feature1 
							
							git merge --squash feature1 		
									# To combine all the incremental changes and create 1 commit point in the target branch 
							
		git cherry-pick :::

			--> Is used to merge the specific commit to the target branch 
			--> git Cherry-Pick is not recommended. 
			
			git cherry-pick <commit_id1> <commit_id2>
			
			git cherry-pick Team1_Changes
			
		
		git stash :::
		
			- Is used to save the uncommitted changes to a temporary area with the git repository. 
			- git stash is List Data Structure 
			
			
			Repo1: 													Repo2 
			
				master : cm1 
				
					feature1 : cm1......	
						
					feature2 : 
								
								
			git stash save "message"		# To create stash entry 
			
			git stash list 					# To get the list of entries in the stash list 
			
			git stash apply					# To copy the latest entry from the stash list back to staging area 
			
			git stash apply	 stash@{2}		# To copy a specific entry from the stash list back to staging area 

			git stash pop					
										# To move the latest entry from the stash list back to staging area & Delete that entry from the stash list

			git stash pop	 stash@{2}				
										# To move a specific entry from the stash list back to staging area & Delete that entry from the stash list									
		
			git stash drop 					# To Delete the latest entry from the stash list
			
			git stash drop	stash@{2}		# To Delete a specific entry from the stash list			
			
			git stash clear					# To Clean up the Stash List 
			
  878  mkdir samplerepo1
  879  cd samplerepo1/
  880  clear
  881  cd ..
  882  cd repo1
  883  git branch
  884  cd ..
  885  cd samplerepo1/
  886  clear
  887  git init
  888  git status
  889  git branch
  890  echo "rec1" >> f1.txt
  891  git add .
  892  git commit -m "cm1"
  893  git branch
  894  ls
  895  git log --oneline
  896  clear
  897  git branch
  898  git branch feature1
  899  git branch
  900  git branch feature2
  901  git branch
  902  git switch feature1
  903  git switch master
  904  celar
  905  clear
  906  git branch
  907  git log --oneline
  908  ls
  909  git switch -c feature3
  910  git log --oneline
  911  ls
  912  clear
  913  git switch master
  914  git checkout -b feature4
  915  git branch
  916  git branch
  917  git switch master
  918  clear
  919  git branch
  920  git log --oneline
  921  ls
  922  git switch feature1
  923  ls
  924  git log --oneline
  925  echo "rec1" >> q1.txt
  926  git add .
  927  git commit -m "f1cm1"
  928  git log --oneline
  929  echo "rec1" >> q2.txt
  930  git add .
  931  git commit -m "f1cm2"
  932  git log --oneline
  933  ls
  934  git switch master
  935  git log --oneline
  936  ls
  937  git merge feature1
  938  git log --oneline
  939  ls
  940  cd ..
  941  mkdir samplerepo2
  942  cd samplerepo2/
  943  clear
  944  git init
  945  echo "rec1" >> f1.txt
  946  git add .
  947  git commit -m "cm1"
  948  git branch
  949  git branch feature1
  950  git branch feature2
  951  clear
  952  git branch
  953  git log --oneline
  954  git switch feature1
  955  git log --oneline
  956  ls
  957  cat f1.txt
  958  echo "record2 from feature1" > f1.txt
  959  cat f1.txt
  960  echo "record1 from feature1" > f1.txt
  961  echo "rec1" > f1.txt
  962  clear
  963  echo "record2 from feature1" >> f1.txt
  964  clear
  965  cat f1.txt
  966  git add .
  967  git status
  968  git commit -m "f1cm1"
  969  cat f1.txt
  970  git switch master
  971  cat f1.txt
  972  git merge feature1
  973  cat f1.txt
  974  git log --oneline
  975  git switch feature
  976  git switch feature2
  977  cat f1.txt
  978  git log --oneline
  979  echo "record2 from feature2" >> f1.txt
  980  cat f1.txt
  981  git add .
  982  git commit -m "f2cm1"
  983  git switch master
  984  cat f1.txt
  985  git merge feature2
  986  clear
  987  git status
  988  clear
  989  cat f1.txt
  990  vi f1.txt
  991  cat f1.txt
  992  git add .
  993  git commit -m "Conflict resolved"
  994  git log --oneline
  995  git status
  996  cat f1.txt
  997  clear
  998  cd ..
  999  mkdir samplerepo3
 1000  cd samplerepo3
 1001  git init
 1002  clear
 1003  echo "rec1" >> f1.txt
 1004  git add .
 1005  git commit -m "cm1"
 1006  clear
 1007  git branch feature1
 1008  git branch feature2
 1009  git branch
 1010  git log --oneline
 1011  ls
 1012  clear
 1013  git switch feature1
 1014  git log --oneline
 1015  ls
 1016  echo "rec1" >> q1.txt
 1017  git add .
 1018  git commit -m "f1cm1"
 1019  echo "rec1" >> q2.txt
 1020  git add .
 1021  git commit -m "f1cm2"
 1022  echo "rec1" >> q3.txt
 1023  git add .
 1024  git commit -m "f1cm3"
 1025  ls
 1026  git log --oneline
 1027  git rebase master
 1028  git switch master
 1029  ls
 1030  git log --oneline
 1031  git merge feature1
 1032  ls
 1033  git log --oneline
 1034  git switch feature2
 1035  ls
 1036  git log --oneline
 1037  echo "rec1" >> w1.txt
 1038  git add .
 1039  git commit -m "f2cm1"
 1040  echo "rec1" >> w1.txt
 1041  git add .
 1042  git commit -m "f2cm2"
 1043  ls
 1044  git log --oneline
 1045  git rebase master
 1046  git log --oneline
 1047  ls
 1048  git switch master
 1049  git merge feature2
 1050  ls
 1051  git log -oneline
 1052  git log --oneline
 1053  git switch feature1
 1054  git log --oneline
 1055  git rebase master
 1056  git log --oneline
 1057  ls
 1058  clear
 1059  ls
 1060  git branch
 1061  git log --oneline
 1062  echo "rec1" >> e1.txt
 1063  git add .
 1064  git commit -m "f1c1.1"
 1065  git log --oneline
 1066  echo "rec2" >> e1.txt
 1067  cat e1.txt
 1068  git add .
 1069  git commit -m "f1c1.2"
 1070  git log --oneline
 1071  cat e1.txt
 1072  echo "rec3" >> e1.txt
 1073  git add .
 1074  git commit -m "f1c1.3"
 1075  echo "rec4" >> e1.txt
 1076  git add .
 1077  git commit -m "f1c1.4"
 1078  echo "rec5" >> e1.txt
 1079  git add .
 1080  git commit -m "f1c1.5"
 1081  git log --oneline
 1082  git switch master
 1083  git log --oneline
 1084  ls
 1085  git merge --squash feature1
 1086  git status
 1087  git commit -m "feature1_Changes for e1.txt"
 1088  git log --oneline
 1089  ls
 1090  cat e1.txt
 1091  clear
 1092  git log --oneline
 1093  cd ..
 1094  cd samplerepo4
 1095  mkdir samplerepo4
 1096  clear
 1097  cd samplerepo4/
 1098  git init
 1099  clear
 1100  echo "rec1" >> f1.txt
 1101  git add .
 1102  git commit -m "cm1"
 1103  git branch feature1
 1104  git branch feature2
 1105  ckear
 1106  clear
 1107  git switch feature
 1108  git switch feature1
 1109  clear
 1110  ls
 1111  git log --oneline
 1112  echo "rec1" >> q1.txt
 1113  git add .
 1114  echo "rec2" >> q1.txt
 1115  git add .
 1116  git switch feature2
 1117  git status
 1118  git switch feature1
 1119  git status
 1120  git stash save "for q1.txt"
 1121  git status
 1122  ls
 1123  git stash list
 1124  echo "rec1" >> q2.txt
 1125  git add .
 1126  git status
 1127  git stash save "for q2.txt"
 1128  git stash list
 1129  git stash apply
 1130  ls
 1131  git stash list
 1132  git commit -m "asdf"
 1133  git stash list
 1134  git stash drop
 1135  git stash list
 1136  echo "rec1" >> r1.txt
 1137  git add .
 1138  git stash save "for r1.txt"
 1139  echo "rec1" >> r2.txt
 1140  git add .
 1141  git stash save "for r2.txt"
 1142  echo "rec1" >> r3.txt
 1143  git add .
 1144  git stash save "for r3.txt"
 1145  echo "rec1" >> r4.txt
 1146  git add .
 1147  git stash save "for r4.txt"
 1148  git stash list
 1149  git stash pop
 1150  git stash list
 1151  git commit -m "asdf"
 1152  clear
 1153  git stash list
 1154  git stash apply stash@{2}
 1155  ls
 1156  git commit -m "adfasdf"
 1157  git stash drop stash@{2}
 1158  git stash list
 1159  git stash pop stash@{2}
 1160  git commit -m "AdsfasdF"
 1161  git stash clear
 1162  git stash list
 1163  echo "adfasdf" >> l1.txt
 1164  git add .
 1165  git status
 1166  git switch master
 1167  git status
 1168  history


Next :::
	
		git remote repos :::
		
		Jenkins!


	
#######################
Day 5 - 5th Oct. 2024
#######################				
		
	git remote repos :::
		
	Distributed VCS :

	Developers;
	
	Workload of Developers??
	
	
	- Enhancement_Projects / Bugfixing Project 	==> Source Code Repo is already present in the remote server
	
	- New Project 								==> Create New Repo in local machine and publish to remote repository	
	


		
	Local Repos 			
			
	Remote Repos
		- Remote GIT Server -> github/gitlab/AzRepo/AWS Code-Commit/bitbucket
	
	
	
	
	git add 				# To Add the changes from working directory to staging area 
	
	git commit 				# To Commit the changes from Staging area to Local Repository
	
	
	git push				# To Push the changes from Local Repository to Remote Repository
	
	
	git clone				# To Clone/Copy the entire Remote repository from Remote Server to Local Machine
	
	git fetch/pull
		==> Both git fetch and git pull are used to handle the incremental changes from remote repository
		
		git fetch 			
							# To just check for the incremental changes from remote repository, if there is any incremental changes exist, it will update the details only in the Local Repository. git fetch will not update any changes into the working directory.
							
							Upon fetch to merge the changes from local repository to working directory, we need used git merge or git pull
							
		git pull 			
							# To check for the incremental changes from remote repository, if there is any incremental changes exist, it will update all the incremental changes in the Local Repository as well in the working directory.	

							git pull = git fetch + git merge 
	


	GITHUB :::
	
	Pull Request :::
	
		- Developer working in feature branch 
		
			- Pull Requests are created by the developers and assigned to the reviewer for approval.
	

	
	Working Directory 						Staging Area						Local Repository						Remote Repository
	                                                                                                            
						  git add                             git commit                             git push               
	index.html			------------>		index.html		------------->		index.html_v1.1    ------------->             index.html_v1.1
			
			
			
		from local machine to access remote repos, we need repo clone url
		
		https://github.com/Edu-DCP-Sep21-2024/testrepo1.git
		
		git clone https://github.com/Edu-DCP-Sep21-2024/testrepo1.git
		
		
		git remote -v			# Used to get the list of remote repos linked to the local repository
		
		git remote add origin https://github.com/Edu-DCP-Sep21-2024/testrepo2.git		# To link the remote repo to local repo
		
		git remote remove origin
		
	
		
		git push -u origin local-featurel		# Push the changes from local repository to remote repo	
												# -u tag is used to identify the credentials used to update the remote repo
												# Need github access token as password 
												
		git branch -M master					# Rename the Branch 
		
		git branch -D feature1					# Delete the Branch
		
	Working with New Repo from Local Machine :
	
	
		1. Create Empty remote git repository 
		
		2. Push the local repo changes to remote repo. 
		
		
Summary :

	git file workflow 
	
	git cmds 
	
	git branch strategies 
	
	rebase 
	
	stash 
	
	remote repos 
	
  501  cd d:
  502  ls
  503  cd Edu_Sep21_DCP/
  504  ls
  505  clear
  506  ls
  507  mkdir remoterepos
  508  cd remoterepos/
  509  clear
  510  ls
  511  git clone https://github.com/Edu-DCP-Sep21-2024/testrepo1.git
  512  ls
  513  cd testrepo1/
  514  clear
  515  ls
  516  git log --oneline
  517  git status
  518  git remote -v
  519  clear
  520  git branch
  521  git branch local-featurel
  522  git branch
  523  git switch local-featurel
  524  ls
  525  git status
  526  git log --oneline
  527  echo "rec1" >> local-file1.txt
  528  git add .
  529  git commit -m "Created local-file1 from local-feature1"
  530  git log --oneline
  531  git status
  532  git push -u origin local-featurel
  533  git push -u origin local-featurel
  534  git switch main
  535  git status
  536  ls
  537  ls
  538  git log --oneline
  539  git status
  540  git fetch
  541  git status
  542  git log --oneline
  543  git pull
  544  ls
  545  git status
  546  git log --oneline
  547  ls
  548  git status
  549  git pull
  550  ls
  551  git status
  552  clear
  553  cd ..
  554  clear
  555  ls
  556  mkdir testrepo2
  557  cd testrepo
  558  cd testrepo2/
  559  clear
  560  git init
  561  echo "rec1" >> file1.txt
  562  git add .
  563  git commit -m "created file1.txt"
  564  git branch
  565  clear
  566  ls
  567  git remote -v
  568  git remote -v
  569  git remote add origin https://github.com/Edu-DCP-Sep21-2024/testrepo2.git
  570  git remote -v
  571  git status
  572  git remote remove origin
  573  git remote -v
  574  git remote add origin https://github.com/Edu-DCP-Sep21-2024/testrepo2.git
  575  git branch -M main
  576  git branch -M master
  577  git remote -v
  578  git push -u origin master
  579  cd ..
  580  mdkir testrepo3
  581  mkdir testrepo3
  582  cd testrepo3
  583  git status
  584  cd ..
  585  cd testrepo2/
  586  git remote -v
  587  git remote add azrepo1 https://github.com/Edu-DCP-Sep21-2024/testrepo1.git
  588  git remote -v
  589  git remote remove azrepo1
  590  cd ..
  591  history
	

Next :

	Build Orchestration Tool - Jenkins 
