#######################
Day 8 - 20th Oct. 2024
#######################	

	Containerization using Docker 


	Containerization :
	
		- It is a process of packaging the application along with its dependencies
		- All Micro-Service based applications should be Containerised
		
	Virtual Machine :
	
		- VMs are Hardware level Virtualization 
		- VMs are created by using the Hypervisor 
		- VMs are used to run the Operating System 
		- Even if there is no active applications, VMs will be up and running 
		- VMs Consume more space and time to start-up the VMs 
		
		
	Containers :
	
		- Containers are OS level Virtualization
		- Containers are created by using the Container Engine  
		- Containers are used to run the applications/Task. NOT Operating System 
		- If there is no active applications/Task, Containers will immedeiatly goes to EXIT State and free-up the resource 
		- Containers Consume less space and time to start-up the Containers 
		
		- Containers are basically used to reduce the no. of VMs 
		
		- Containers uses the -> Namespace and Control Groups 	# Used to create a dedicated address space to any process 
		
		
	Use-Cases :
	
		Operating System :
		
			- Run some process/task/applications 
			
			- Core of OS --> Kernel 
			
				-> Namespace and Control Groups 	# Used to create a dedicated address space to any process 
				
				
		Infra-Structure Perspective :
		
			Jenkins_Master(VM) :
				Jenkins_Slave1(VM)	- Java App Build 
				Jenkins_Slave2(VM)	- Python App Build 
				Jenkins_Slave3(VM)	- Angular App Build 
				Jenkins_Slave4(VM)	- NodeJS App Build 
				Jenkins_Slave5(VM)	- .Net App Build 
				
			Jenkins-Master(VM) 
				Jenkins_Slave(VM) 
					Install Container Engine 
						C1 - Java App Build 	--> Image -> ubuntu_base_image -> git,jdk,maven
						C2 - Python App Build 
						C3 - Angular App Build 
						C4 - NodeJS App Build 
						C5 - .Net App Build 
				
		
		Developers' / DevOps Perspective :
		
		
			Developer :
			
				Application Src Code :
				
				Build 		==> Application Artifacts - mywebapp.war
				
					To to run mywebapp.war 
						- jdk17 & tomcat8
						
					Package the application : (mywebapp.war, jdk17 & tomcat8) --> mywebapp_img1
				
					Deploy the Application image to the target environment 
				
				Deploy to QA Environment :
				
					Copied the mywebapp.war to QA Server 
					
				
				QA_Server - - jdk11 & tomcat10 - mywebapp.war
				
					--> mywebapp_img1 --> Run this image an application Container					
					
				UAT --> mywebapp_img1 --> Run this image an application Container
				
				PROD --> mywebapp_img1 --> Run this image an application Container
				
				

	Working with Containers :
	
		Terminologies :
		
		- Container Engine 	# Used to Create Container Images and Run the Containers 
							# Docker Container Engine 
		
		- Container Image 	# Is a static file that defines the properties and the dependencies of Containers
							# Non-Executable
							# Images are composed of various layers 
							# These layers are created using the Instruction 
		
		- Container 		# Executable units of Container images. 
		
		- Container Registry # Used to manage/version control the Container Images 
							 # DockerHub -> https://hub.docker.com/
		
		- Container Repositories	# Subset of Container Registry
		
		
		
		AWS : ECS/ECR 
		Azure : ACS/ACR 
		GCP : GCE/GCR 
		
		Installation of Container Engine :		# https://docs.docker.com/engine/install/
			apt install docker.io -y

		docker cli Commands :	
		
		
			docker --version 

			docker images 	# get the list of images 
			
			docker ps 		# get the list of active containers 
			
			docker ps -a 	# get the list of all containers 
		
		
		docker pull <Image_Name>	# To download the docker container image from dockerhub registry to local machine 
		
			docker pull centos:latest
			docker pull ubuntu:v1.0
			

	docker pull <Image_Name> 				# TO Download the latest version of Container Image 
	
	docker pull <Image_Name>:<tag>			# TO Download the specific version of Container Image 
	
	
	docker run <Image_Name>					# To Create and run the Container 
	
	Container Execution Modes ::
	
		- Foreground / Attached Mode 		# Default Mode 
		
				docker run <image_name> 
				
				Eg.: 
				
					docker run centos sleep 20 
		
		- Background / Detached Mode 
			
				docker run -d <image_name> 
				Eg.: 
				
					docker run -d centos sleep 20 	
		
		- Interactive Mode 
		
				docker run -d <image_name> 
				Eg.: 
				
					docker run -it centos bash 			

	
	docker start <container_id>						# To Start the Container 
	
	docker stop <container_id>						# To Stop the container 
	
	docker exec -it <container_id> bash 			# To Login to the running Container 
	
	docker rm <container_id>						# To remove/delete the Container 
	
	docker rmi <image_name>							# To remove/delete the Image from local machine
	
	
	Port Mapping / Port Binding ::::
	
		- It is used to expose the container to access thru internet 
		
		- It is a process of mapping the container port with the host port.
	
	Run Application inside the Container!
	
		docker run -it tomcat:8.0 bash
		
		docker run -it -p <host_Port>:<container_Port> tomcat:8.0
		
		Eg:
		
		docker run -it -p 8089:8080 tomcat:8.0
	
		-p <host_Port>:<container_Port>
	
	
	QA_Server :::
	
		Installed Tomcat ::
		
		8080 --> Execute only one application 
		
		service1 -- 8080
		
		service2 -- 8089
		

	Docker Volumes ::::
	
	
		Container :::
		
			- Runs in an isolated address space.
			
		Monolith
		Micro-Service
		3-tier Applications
			
			
		Container
			
			Stateless Applications
				- Application that will not have any state of execution
				- Applications that will not create any output/need any input.
		
			Stateful Applications ::
				- Application that will have state of execution
				- Applications that requires some input and generate some output
			
			
			
		User_Login/SignIn Services :::
		
		3 - Tier Application Layers :::
		
			Front-End - User Interface 
			
			Application Layer - Business Logic 
			
			Back-End Layer - DataBase 
			
		
		
		docker volume :::
			
			- Is used to create permanent Volumes that can be attached to any container to maintain the persistant data accross the Applications running thru containers. 
		
		docker volume create <vol_name>
		
		docker volume inspect <vol_name>
		
		docker run -it centos bash 
		
		docker run -it --mount source=edu-sep21-vol1,destination=/edu-sep21-vol1 ubuntu bash
		
	
	
   13  apt install docker.io -y
   14  docker --version
   15  clear
   16  docker images
   17  docker ps
   18  docker ps -a
   19  clear
   20  docker images
   21  docker ps -a
   22  docker pull centos
   23  docker images
   24  clear
   25  docker images
   26  docker ps -a
   27  docker run centos
   28  docker ps
   29  docker ps -a
   30  docker ps
   31  docker run centos sleep 20
   32  docker run centos sleep 5
   33  docker run -d centos sleep 20
   34  docker ps
   35  docker run -d centos sleep 20
   36  docker ps
   37  celar
   38  clear
   39  docker run -it centos bash
   40  docker images
   41  clear
   42  docker images
   43  docker run -it ubuntu bash
   44  docker ps
   45  clear
   46  docker images
   47  docker run -it ubuntu bash
   48  docker ps -a
   49  docker start 494da06d729c
   50  docker ps
   51  docker exec -it 494da06d729c bash
   52  docker ps
   53  docker stop 494da06d729c
   54  clear
   55  docker images
   56  docker ps -a
   57  docker rm 0f12ce68d857 d06d1dfe4194
   58  docker ps -a
   59  docker rmi centos
   60  docker rm aa1d3e5a0866 f245457afdc9 ee8ee8d14ff6 82c258bfbe40 49e4f226e23e
   61  docker rmi centos
   62  docker images
   63  docker ps -a
   64  docker start 494da06d729c
   65  docker ps
   66  docker exec -it 494da06d729c bash
   67  docker stop 494da06d729c
   68  clear
   69  docker images
   70  docker ps -a
   71  clear
   72  docker run -it tomcat:8.0 bash
   73  docker ps -a
   74  docker run -d tomcat:8.0
   75  docker ps -a
   76  clear
   77  docker ps -a
   78  clear
   79  docker ps -a
   80  docker run -it -p 8089:8080 tomcat:8.0
   81  clear
   82  docker images
   83  docker ps -a
   84  clear
   85  docker volume list
   86  docker volume create edu-sep21-vol1
   87  docker volume list
   88  docker volume inspect edu-sep21-vol1
   89  cd /var/lib/docker/volumes/
   90  cd edu-sep21-vol1/
   91  cd _data/
   92  pwd
   93  clear
   94  pwd
   95  docker run -it ubuntu bash
   96  docker run -it --mount source=edu-sep21-vol1,destination=/edu-sep21-vol1 ubuntu bash
   97  ls
   98  echo "rec1" >> infile.txt
   99  ls
  100  docker run -it --mount source=edu-sep21-vol1,destination=/edu-sep21-vol1 ubuntu bash
  101  docker run -it --mount source=edu-sep21-vol1,destination=/sample-vol1 ubuntu bash
  102  cd ~
  103  history


	
#######################
Day 10 - 27th Oct. 2024
#######################	

	Create Docker Images :
	

		docker commit ::
		
			- To Create a New Container Image based on the properties of existing Container.
			
			Syntax :

				docker commit <existing_container_id> <dockerhub_repo_name>/New_Image_Name>:<tag_Name>

			Eg.: 
				docker commit 3aafbd82cd78 loksaieta/edu-sep21-mvnbuildenv
		
		
		
		docker build ::
		
			- To create a new Container Image based on the Dockerfile reference.
			- Dockerfile composed of Instructions to Create Docker Container Images
			- Application Developers create the Dockerfile and update in the Source Code Repository. 
			
			
			vi Dockerfile 
			
			FROM ubuntu
			RUN apt update -y
			RUN apt install git -y
			RUN apt install maven -y 
			
			FROM centos
			RUN yum update -y
			RUN yum install git -y
			RUN yum install maven -y 
			
			Syntax :
			
			docker build -t <dockerhub_repo_name>/New_Image_Name>:<tag_Name> .		# '.' refers to the Dockerfile path
			
			Eg.:
			
			docker build -t loksaieta/edusep21mvnbuildenv:v1.0 .	# '.' refers to the Dockerfile path
				
		
		vi Dockerfile 
		
		FROM ubuntu 
		RUN apt update -y 
		RUN apt install git -y 
		RUN apt install maven -y 
		
			Syntax :
			
			docker build -t <dockerhub_repo_name>/New_Image_Name>:<tag_Name> .		# '.' refers to the Dockerfile path
			
			Eg.:
			
			docker build -t loksaieta/sa-javamvnimg .		# '.' refers to the Dockerfile path
			
		Write Dockerfile :::
		
			Docker File Instructions :::
			
			FROM 									# To Identify the Base Image
			RUN 									# To run the package manager
			COPY 									# To Copy the file from host volume to container volume
			CP 										# To Copy the file within the container volumes 
			ADD 									# To Copy the file from Host Volume as well as from URL
			ENV 									# To define the Environment Variable 
			ARG 									# To pass Arguements to the Steps in Dockerfile 
			EXPOSE									# To Define the Container Port 
			WORKDIR									# To set the current working directory within the Container 
			CMD										# To set the default start-up command to the container 
													  This Command can be changed at run-time.
			ENTRYPOINT								# To set the default start-up command to the container 
													  This Command cannot be changed at run-time.
													  		
			Dockerfile :::
			
			FROM tomcat:8.0
			COPY ./target/*.war /usr/local/tomcat/webapps
			EXPOSE 8085	
			
			docker build -t loksaieta/webappimg:v1.0 .			# run this command from the Dockerfile location.

			docker run -it -p 8089:8080 loksaieta/webappimg:v1.0
			
			
	Push the Images to Container Registry ::::
	
	
	Access Docker Registry using Token Based Authentication :
	
		- Create Access Token in DockerHub 
		
			docker login -u loksaieta
			
			zdfasdfasdfasdfasdf8
			
			
		docker push <image_name>:<tag>
		
		docker push loksaieta/edusep21mvnbuildenv:v1.0
	

	Container Orchestration ::::
	
		Overview of ;
			Docker Compose
			Docker Swarm 
			
		Docker Compose
			- Is an extension/Plugin to Docker Engine.
			- Is used to run multiple containers as a Service!
			- Docker Compose uses the Yaml file to create the Service definitions
			
		User_SignIn_Service:
			C1.0 
            C2.0            
            C3.0
				
			
			Any Container that is part of a Service :
		
				should be in-sync with other container within the service 
				
				
				Start/Stop all these container at the same time.
		
				
		Ensure High Availability of Containers :
		
		
		User_SignIn_Service:
			C1.0 				
            C2.0            
            C3.0	


	Docker Swarm ::::

	Container Orchestration Tool ::::
	
		- Docker Swarm is one the Container Orchestration Tools.
		- It is meant only for Docker Containers.
		- Used to Ensure High Availability of Containers by creating Replicas of Containers.
		- We cannot Do Auto-Scaling or Load Balancing!



	3-Tier Application Service :
	
		User_SignIn Service :
	
			Front-End			-->		C1.0,C1.1,C1.2,C1.3,C1.4 
			
			Application_Layer 	-->		C2.0,C2.1,C2.2,C2.3,C2.4
			
			Database Layer 		-->		C3.0,C3.1,C3.2,C3.3,C3.4
		
			C1.0 				
            C2.0            
            C3.0			
		
		
		Replicas of Containers 
		
			C1.0,C1.1,C1.2
		    C2.0,C2.1,C2.2
		    C3.0,C3.1,C3.2
			
			
		Production Environment
		
		Production Servers 
		
		
		*.war
		
			s1,2,3,4,5
		
  104  history
  105  clear
  106  docker ps
  107  docker stop 14a6e5a21349
  108  clear
  109  docker ps -a
  110  clera
  111  clear
  112  docker ps -a
  113  clear
  114  docker ps -a
  115  docker run -d -p 8089:8080 tomcat:8.0
  116  docker run -it -p 8089:8080 tomcat:8.0
  117  docker run -d -p 8088:8080 tomcat:8.0
  118  docker run -d -p 8087:8080 tomcat:8.0
  119  docker ps
  120  clear
  121  docker ps
  122  clear
  123  docker ps
  124  docker ps -a
  125  clear
  126  docker ps -a
  127  clear
  128  docker ps
  129  clear
  130  docker ps
  131  clear
  132  history
	
