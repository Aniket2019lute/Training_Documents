#######################
Day 5 - 5th Oct. 2024
#######################	


	Build Orchestration Tool - Jenkins 
	
	Using DevOps Automation Process:
						
		Automate :::
		
			Build the Source Code 	
			Create Artifacts 
			Unit Testing 
			Promote the Artifacts to Testing Environments
			Send notification to testing Team
			
			
	Build Orchestration Tool - Jenkins 
		- Used to automate the application Builds and deployments 
		- To Create CI/CD Pipeline Project to Automate the builds and deployments 
		
		
	Jenkins Architecture :
	
		- Jenkins - Master / Slave Architecture 
		
			Jenkins Master Node (VM) 		--> Install Jenkins and Create Jenkins CICD Projects & Scheduled to run in Jenkins Slave_Node 
			
				Jenkins Slave_Node (VM)		--> To perform application Build
				
		How to create the Infra-Structure :
		
			AWS Cloud to Create Virtual Machines :
				- Create a free-tier account 		-- 12 months 
						https://aws.amazon.com/console/
						
						https://signin.aws.amazon.com/signup?request_type=register
						
							- Active Email_ID 
							- Active Mobile Number
							- Active Credit/Debit Card 
							
							
				- Login to AWS Console : as a root user 
						https://aws.amazon.com/console/
						
				- Choose EC2 Service	
					
				- Create EC2 Instance - Linux (Virtual Machines)
				
				
					1 EC2 Instance ==> 750 Hrs/Month 
					
					10 EC2 Instances ==> 75 Hrs/Month
				
				- Connect to EC2 Instance - Linux - Ubuntu 	- v22.04
				
					SSH Connection :
						
						Host_Name 
						User_Name 
						Credentials :	
							- Password 
							- Access Token 
							- SSH Keys 		# 
					
						- EC2 Instance Connect 		--> Default using Web Browser 
						
						- SSH Agent 					# Windows Machines 	
							- MobaXterm 				https://mobaxterm.mobatek.net/download.html
														https://mobaxterm.mobatek.net/download-home-edition.html 	
															- Select Installer Edition 
															- Download *.zip file 
															- Extract all 
															- Install 
							- Putty 
							
						- Terminals 					# Mac / Linux Users 
				
					
				- Login and Install all the required tools 
			
		
	Jenkins Architecture :
	
		- Jenkins - Master / Slave Architecture 
		
			Jenkins Master Node (VM) 		--> Install Jenkins and Create Jenkins CICD Projects & Scheduled to run in Jenkins Slave_Node 
			
				Jenkins Slave_Node (VM)		--> To perform application Build
				
	Build Orchestration Tool - Jenkins 
		- Used to automate the application Builds and deployments 
		- To Create CI/CD Pipeline Project to Automate the builds and deployments 				
	
	Using DevOps Automation Process:
						
		Automate :::
		
			Build the Source Code 	
			Create Artifacts 
			Unit Testing 
			Promote the Artifacts to Testing Environments
			Send notification to testing Team		
		
		
			Application Build :	Compile the code and create artifacts(binaries)
				Build Tool - Maven 
				
			Unit Testing	: Junit / TestNG
			
	Working with Jenkins :::
	
	Developers' Perspective :
		- Developers are just the Consumers 
		
	DevOps Perspective ::
	
		- DevOps Team are the Owner of Jenkins Architecture
		
	Roles and Responsibilities :::
	
		- Jenkins Administration 
		- Installation of Jenkins 
		- Jenkins Plugins Management 
		- Tools Management 
		- User Management 
		- Security Management 
		- Credential Management 
		- Jenkins Master/Slave Nodes Configurations 
		- Create CICD Pipeline Projects 
		- Onboard the Applications to DevOps Workflow
		- Periodic Upgrade of Jenkins and its plugins 
		- Periodic Backup of Jenkins Components 
		- Perform Backup and recovery 
		
		
	- Installation of Jenkins :
	
		- https://www.jenkins.io/doc/book/installing/
		
		To Install any :
			- Install the Pre-requisites
			- Install the Actual Tool 
			- Perform the post installation activities 
			
			
		Jenkins-Master(VM)			==> Tools to be installed : git, jdk, jenkins
										Purpose : Create CICD Pipeline Project and shedule to run in slave nodes
										
										
#######################
Day 6 - 6th Oct. 2024
#######################	

		- Global System Configuration
		
		- Jenkins Plugins Management 
				- Extensions to Jenkins 
				
					Ant/Gradle/Maven - Build Tool 
					
					Docker - 
					
					Kubernetes -
		
			- Periodic Upgrade of Jenkins and its plugins
		
		- Tools Management 
		
		- User Management 
		
			- Used to provide access to users 
			
				- Active Directory 
				- SSO Option 
				- LDAP 
						
		- Security Management 
		
			- Allow or deny access to users 
			- Define the level of access 
			- User Authentication(Who) and Authorization(What) 
				
		- Credential Management 
		
		- Create Jenkins Jobs ::::
		
		Jenkins-Master(VM)			==> Tools to be installed : git, jdk, jenkins
										Purpose : Create CICD Pipeline Project/job and shedule to run in agent
										
										
		Jenkins_Master 				--> Create cicd pipeline project for java application & run on Jenkins_Master			

			Jenkins Jobs/Projects :
			
				- Free-Style Project 		==> Completely Manual Configurations
				
				- Pipeline Projects 		==> Scripted using groovy - used to onboard the applications
		
		- Free-Style Project 		==> Completely Manual Configurations
		
			--> Handle Variables in Jenkins :::
			
				- Environment Variables		# System Variables/Keywords 
				
					echo "Hello"
					
					echo $var1
					
					"${var1}"	
				
					eg.: echo "jenkins-${JOB_NAME}-${BUILD_NUMBER}"
				
				
				- User-Defined Variables
				
					a = 5;
		
		- Error Handling in Jenkins Projects :::


		- Pipeline Projects 		==> Scripted using groovy - used to onboard the applications
		
			- Scripted Pipeline Projects 

node {
    def mvnHome
    stage('Preparation') { // for display purposes
        // Get some code from a GitHub repository
        git 'https://github.com/jglick/simple-maven-project-with-tests.git'
        // Get the Maven tool.
        // ** NOTE: This 'M3' Maven tool must be configured
        // **       in the global configuration.
        mvnHome = tool 'M3'
    }

	
			- Declarative Pipeline Projects 
				
pipeline {
    agent any

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout'
            }
        }
        stage('Application_Build') {
            steps {
                echo 'Perform Application Build'
            }
        }
        stage('Deploy to QA Environment') {
            steps {
                echo 'Deploy to QA'
            }
        }
    }
}		
		
		Pipelines are composed of various stages :::
		
			Task : Application Build and Deployment :
			
			
		1. SCM_Checkout 
		2. Build - compile & create artifact 
		3. Unit Testing 
		4. Promote the Artifacts to Test Environment 
		5. Send Email Notification 

		Automate :::
		
			Build the Source Code 	
			Create Artifacts 
			Unit Testing 
			Promote the Artifacts to Testing Environments
			Send notification to testing Team		
		
		
		
			
	- Jenkins Master/Slave Nodes Configurations 

		Jenkins_Master	(VM)			--> jdk,jenkins ==> Create CICD Pipeline Project/job and shedule to run in agents
		
			Jenkins_Slave1	(VM)		--> Java Build --> jdk, maven ==> build java application and create artifacts
			Jenkins_Slave1.1(VM)		--> Java Build --> jdk, maven ==> build java application and create artifacts
			Jenkins_Slave2	(VM)		--> .Net Build --> .Net sdk ==> build .net application and create artifacts			
			Jenkins_Slave3				--> Python Applications
			Jenkins_Slave4				--> Angular Applications
			Jenkins_Slave5				--> NodeJS Applications
			
		Jenkins_Master (VM)			--> jdk,jenkins ==> Create CICD Pipeline Project/job and shedule to run in agents		
			Jenkins_Slave (VM)		--> git, jdk, maven ==> build java application and create artifacts


		SSH Connection: 
		
			Key based Authentication
			
				- Host Name 
				- User Name 
				- Create SSH Key Pairs 

	Environments:
		
	Non-Prod 																				Prod 
		
		Dev Environment
		
		Build Environment
		
		Test Environments
			- QA 
			
			- UAT 					=====================>											Production Servers 


	Maven is a build tool used to build java based applications
	
		- pom.xml 		# used to define the application build properties 
						# used to define the dependencies and plugins to perform the build
						# pom.xml will be created and maintained in the source code repository by the developer 
						# Project Object Model
		- maven goal 
						# define the task :
						 
						mvn compile 	# Compile the source code 
						
						mvn test 		# Compile and perform unit testing 
						
						mvn package 	# Compile, test and create artifacts in the target folder						
						
						mvn clean package # Clean-up the target folder and compile,test,create artifacts						
						
		
	
	- Create CICD Pipeline Projects 
		
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout'
				git 'https://github.com/Edu-DCP-Sep21-2024/java-mvn-springbapp.git'
            }
        }
        stage('Application_Build') {
            steps {
                echo 'Perform Application Build'
				sh 'mvn clean package'
				
            }
        }
        stage('Deploy to QA Environment') {
            steps {
                echo 'Deploy to QA'
            }
        }
    }
}		
		



Next ::
			- Setup the Testing Server :
			
				Web Application Server - Tomcat / Nginx / httpd
		
		- Onboard the Applications to DevOps Workflow
		
	
										
#######################
Day 7 - 19th Oct. 2024
#######################		

	- Setup Tomcat Server 
	
	- Integrate Tomcat Server to Jenkins 
	
	- Setup Build Triggers 
	
	- Setup EMail Notification 
	

	Environments :::
	
		Non-Prod Environments																Production Environments
		
			Dev Environment
			
			Build Environment
			
			Test Environment
			
				QA 
				
				UAT 						==============>		Staging_Env		=====>				Production Servers1,2,3,4,5,6


	Web Application Server - Tomcat / Nginx / httpd
	
	
	Jenkins_Master 
		Jenkin_Slave 			# *.war
		
	Tomcat_Server 
	
	Deployment ???? -> Process of copying the artifacts from one server to another server
	
	
	Source_Server 																Target_Server 
	
	
		Jenkins_Slave_Node															Tomcat_Server 
		
			target/*.war																/opt/tomcat/webapps/*.war
			
	
	Publish-Over SSH Plugins :
	
		- Install Publish-Over SSH Plugins
	
		- Integrate any remote server to Jenkins Master 
		
		
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout'
				git 'https://github.com/Edu-DCP-Sep21-2024/java-mvn-springbootwebapp.git'
            }
        }
        stage('Application_Build') {
            steps {
                echo 'Perform Application Build'
				sh 'mvn clean package'
				
            }
        }
        stage('Deploy to QA Environment') {
            steps {
                script{
                    sshPublisher(publishers: [sshPublisherDesc(configName: 'Edu-Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                }
            }
        }
    }
}


Build Triggers :::

	- Used to automate / schedule the Jenkins Jobs for execution.
	
	
	Types of Build Triggers :
	
	- Build Periodic
	
	
	- PollSCM 
	
	
	- GITHub Webhook 
	
	Build Triggers :::
	
		It used to Automate the Job Exection.
		
		-> Build Periodic					# https://crontab.guru/
		
			- Used to trigger the jenkins jobs irrespective of code change. - It is not meant for CI/CD.
			- The build is sheduled based on the crontab 
			
			Non-Prod Environments 										Prod Environment
			 Shd be available only during business hrs 
				DEV Servers 
				BUILD
				QA/UAT 														Prod Servers 
				
				
				8AM - 10PM 
		
		
		-> Github Webhook 
		
			- Used to trigger the jenkins Job whenever there is any commit happened in the remote repository
			- github webhook has be configured in the remote repository by using the jenkins URL
		
		
		-> Poll-SCM 
		
			- It is used to trigger the build based on the crontab only if there is any changes happened in the source-code repository.
			
			Eg.: 
			
				Test Cycles :::
				
				
				8AM - 12PM - 3PM 
	

Email_Notifications :

	Jenkins Supports Email Notifications :
	
How to setup the Email Server in the Jenkins Config:

goto manage jenkins -> system configuration 

goto Email Notification 
		
SMTP Server :
smtp.gmail.com

SMTP Authentication

SMTP Port :: 465

Login to Gmail :::

Click Manage Account Settings

@Left side panel - select Security 

MFA --> mobile#

App Password = 16 bytes of App Password. vaur v zr

What ? window
Which Appln - email				


		Stage{}
		post{
			success 
			failure 
			unstable 
		}
		
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout'
				git 'https://github.com/Edu-DCP-Sep21-2024/java-mvn-springbootwebapp.git'
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'SCM-Checkout Failed ', to: 'l@gmail.com'
                }
              }
        }
        stage('Application_Build') {
            steps {
                echo 'Perform Application Build'
				sh 'mvn clean package'				
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: "Jenkins Jobs Status ${BUILD_URL}", cc: 'l@gmail.com', from: '', replyTo: '', subject: 'Build Failed ', to: 'l@gmail.com'
                }
              }
        }
        stage('Deploy to QA Environment') {
            steps {
                script{
                    sshPublisher(publishers: [sshPublisherDesc(configName: 'Edu-Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: "Jenkins Jobs Status ${BUILD_URL}", cc: 'l@gmail.com', from: '', replyTo: '', subject: 'Deploy to QA Failed ', to: 'l@gmail.com'
                }
                success {
                  sh "echo 'Send mail on Successful'"
					mail bcc: 'l@gmail.com', body: "Jenkins Jobs Status ${BUILD_URL}", cc: 'l@gmail.com', from: '', replyTo: '', subject: 'Deploy to QA Successful ', to: 'l@gmail.com'
                }
              }
            }
        }
    }
}


		
	
